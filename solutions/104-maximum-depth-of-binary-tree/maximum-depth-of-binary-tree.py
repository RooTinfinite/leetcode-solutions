class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        # Base case...
        # If the subtree is empty i.e. root is NULL, return depth as 0...
        if root == None:
            return 0
        # if root is not NULL, call the same function recursively for its left child and right child...
        # When the two child function return its depth...
        # Pick the maximum out of these two subtrees and return this value after adding 1 to it...
        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1     # Adding 1 is the current node which is the parent of the two subtrees...